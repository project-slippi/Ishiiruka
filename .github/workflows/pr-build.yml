name: PR Builds x64

on:
  push:
    branches:
        - "**"
    paths-ignore:
        - "**.md"
        - "**.ini"
  pull_request:
    branches:
      - "**"
    paths-ignore:
      - "**.md"
      - "**.ini"

jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Netplay, Playback]
        include:
          - build_type: Netplay
            artifact_name: windows64-netplay
            build_config: Release
          - build_type: Playback
            artifact_name: windows64-playback
            build_config: ReleasePlayback
    env:
      DXSDK_DIR: "C:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010)\\"
    name: "Windows ${{ matrix.build_type }}"
    runs-on: windows-2019
    steps:
      - name: "Setup Go"
        uses: actions/setup-go@v2
        if: matrix.build_type == 'Netplay'
      - name: "Remove Redistributable"
        shell: cmd
        run: |
          MsiExec.exe /passive /X{F0C3E5D1-1ADE-321E-8167-68EF0DE699A5}
          MsiExec.exe /passive /X{1D8E6291-B0D5-35EC-8441-6616F567A0F7}
      - name: "Install DirectX SDK"
        shell: powershell
        run: |
          choco install directx-sdk
      - name: "Setup MSBuild"
        uses: microsoft/setup-msbuild@v1   
      - name: "Checkout"
        uses: actions/checkout@v2.3.1
      - name: 'Fetch Git Tags'
        shell: bash
        if: success()
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
      - name: "Build Dolphin"
        shell: cmd
        run: |
          msbuild /p:Configuration=${{ matrix.build_config }} /p:Platform=x64 ${{ github.workspace }}\Source\Dolphin.sln
      - name: "Build Updater"
        working-directory: ${{ github.workspace }}
        shell: cmd
        if: matrix.build_type == 'Netplay'
        run: |
          cd %GOPATH%
          git clone https://github.com/project-slippi/dolphin-slippi-tools
          cd dolphin-slippi-tools
          go get github.com/gonutz/w32 github.com/machinebox/graphql golang.org/x/sys/windows/registry
          go build
          copy /b /v /y dolphin-slippi-tools.exe ${{ github.workspace }}\Binary\x64\
      - name: "Prepare Artifact"
        working-directory: ${{ github.workspace }}
        run: |
          Xcopy /Y /E /I .\Data\Sys .\Binary\x64\Sys
          cd .\Binary\x64\
          fsutil file createnew FIX-VCRUNTIME140-ERROR.txt 0
          echo "Download and install this: https://aka.ms/vs/16/release/vc_redist.x64.exe" > .\FIX-VCRUNTIME140-ERROR.txt
      - name: "Add Playback codes"
        working-directory: ${{ github.workspace }}
        if: matrix.build_type == 'Playback'
        run: |
          git clone https://github.com/project-slippi/slippi-desktop-app
          Xcopy /Y /E /I .\Data\Sys .\Binary\x64\Sys
          Xcopy /Y /E /I .\slippi-desktop-app\app\dolphin-dev\overwrite\Sys .\Binary\x64\Sys
          Xcopy /Y /E /I .\slippi-desktop-app\app\dolphin-dev\overwrite\User .\Binary\x64\User
      - name: Package Artifact
        working-directory: ${{ github.workspace }}
        run: |
          $FILE_NAME="${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-${{ matrix.artifact_name }}.zip"
          mkdir artifact
          cd .\Binary\x64\
          fsutil file createnew portable.txt 0
          7z a $FILE_NAME .\*
          move $FILE_NAME ..\..\artifact\
      - name: "Publish"
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.artifact_name }}
          path: "./artifact/"
  linux:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Netplay, Playback]
        include:
          - build_type: Netplay
            artifact_name: linux-netplay
            build_config: netplay
          - build_type: Playback
            artifact_name: linux-playback
            build_config: playback
    name: "Ubuntu ${{ matrix.build_type }}"
    runs-on: ubuntu-18.04
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Fetch Git Tags'
        if: success()
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
      - name: "Install prerequisites"
        if: success()
        shell: bash
        run: |
          sudo dpkg --add-architecture amd64
          sudo apt update
          sudo apt install \
          cmake \
          pkg-config \
          git \
          wget \
          libao-dev \
          libasound2-dev \
          libavcodec-dev \
          libavformat-dev \
          libbluetooth-dev \
          libenet-dev \
          libgtk2.0-dev \
          liblzo2-dev \
          libminiupnpc-dev \
          libopenal-dev \
          libpulse-dev \
          libreadline-dev \
          libsfml-dev \
          libsoil-dev \
          libsoundtouch-dev \
          libswscale-dev \
          libusb-1.0-0-dev \
          libwebkit2gtk-4.0-dev \
          libxext-dev \
          libxrandr-dev \
          portaudio19-dev \
          zlib1g-dev \
          libudev-dev \
          libevdev-dev \
          libmbedtls-dev \
          libcurl4-openssl-dev \
          libegl1-mesa-dev \
          libpng-dev \
          qtbase5-private-dev \
          libxxf86vm-dev \
          x11proto-xinerama-dev
      - name: "Build Dolphin"
        if: success()
        working-directory: ${{ github.workspace }}
        run: |
          ./build-linux.sh ${{ matrix.build_config }}
      - name: "Build AppImage"
        if: success()
        working-directory: ${{ github.workspace }}
        run: |
          ./build-appimage.sh ${{ matrix.build_config }}
      - name: "Package"
        if: success()
        working-directory: ${{ github.workspace }}
        run: |
          mkdir artifact
          FILE_NAME=${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-${{ matrix.artifact_name }}.zip
          zip -r "${FILE_NAME}" ./*.AppImage*
          mv "${FILE_NAME}" ./artifact/
      - name: "Publish"
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.artifact_name }}
          path: "./artifact/"
  macOS64-netplay:
    name: "macOS Netplay"
    runs-on: macos-10.15
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Fetch Git Tags'
        if: success()
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
      - name: "Install 10.14 SDK"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz
          tar -xf MacOSX10.14.sdk.tar.xz
          rm MacOSX10.14.sdk.tar.xz
          sudo mv MacOSX10.14.sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/
      - name: "Download and Install prerequisites"
        if: success()
        shell: bash
        run: |
          brew update
          brew upgrade cmake
          brew install \
          ffmpeg \
          libpng \
          libav \
          pkgconfig \
          libao \
          sound-touch \
          hidapi \
          create-dmg
      - name: "Build Netplay (No Codesigning)"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib
          mkdir build
          cd build
          cmake ..
          make -j7
      - name: "Package Netplay"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          FILE_NAME=${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-macOS-netplay.dmg
          echo "FILE_NAME=$(FILE_NAME)" >> $GITHUB_ENV
          cp -Rf Data/Sys build/Binaries/Slippi\ Dolphin.app/Contents/Resources/
          mkdir artifact
          create-dmg --no-internet-enable \
            --volname "Slippi Dolphin Installer" \
            --volicon "Data/slippi_dmg_icon.icns" \
            --background "Data/slippi_dmg_background.png" \
            --text-size 14 \
            --window-pos 200 120 \
            --window-size 590 610 \
            --icon-size 100 \
            --app-drop-link 440 196 \
            --icon "Slippi Dolphin.app" 140 196 \
            --hide-extension "Slippi Dolphin.app" \
            "${FILE_NAME}" \
            "./build/Binaries/"
          mv "${FILE_NAME}" artifact/
      - name: "Publish"
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: "macOS-netplay"
          path: "./artifact/"
  macOS64-playback:
    name: "macOS Playback"
    runs-on: macos-10.15
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Fetch Git Tags'
        if: success()
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
      - name: "Install 10.14 SDK"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz
          tar -xf MacOSX10.14.sdk.tar.xz
          rm MacOSX10.14.sdk.tar.xz
          sudo mv MacOSX10.14.sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/
      - name: "Download and Install prerequisites"
        if: success()
        shell: bash
        run: |
          brew update
          brew upgrade cmake
          brew install \
          ffmpeg \
          libpng \
          libav \
          pkgconfig \
          libao \
          sound-touch \
          hidapi
      - name: "Build Playback"
        if: success() && env.CERTIFICATE_MACOS_APPLICATION == null
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib
          mkdir build
          cd build

          if [[ -z "$MACOS_CERT_PASSWD" ]]; then
            echo "Building with code signing"
            cmake -DIS_PLAYBACK=true -DMACOS_CODE_SIGNING="ON" ..
          else
            cmake -DIS_PLAYBACK=true ..
          fi
          
          make -j7
        env:
          MACOS_CERT_PASSWD: ${{ secrets.CERTIFICATE_MACOS_PASSWORD }}
      - name: "Inject Playback Resources"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          git clone https://github.com/project-slippi/slippi-desktop-app
          cd ./build/Binaries/
          cp -Rf ../../Data/Sys ./Slippi\ Dolphin.app/Contents/Resources
          cp -Rf ../../slippi-desktop-app/app/dolphin-dev/overwrite/Sys ./Slippi\ Dolphin.app/Contents/Resources
          cp -Rf ../../slippi-desktop-app/app/dolphin-dev/overwrite/User ./Slippi\ Dolphin.app/Contents/Resources 
      - name: "Codesign Playback"
        if: success() && env.CERTIFICATE_MACOS_APPLICATION != null
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          chmod +x Tools/load-macos-certs-ci.sh && ./Tools/load-macos-certs-ci.sh
          /usr/bin/codesign -f -s "${{ secrets.APPLE_IDENTITY_HASH }}" --deep --options runtime --entitlements Source/Core/DolphinWX/Entitlements.plist build/Binaries/Slippi\ Dolphin.app
        env:
          CERTIFICATE_MACOS_APPLICATION: ${{ secrets.CERTIFICATE_MACOS_APPLICATION }}
          CERTIFICATE_MACOS_PASSWORD: ${{ secrets.CERTIFICATE_MACOS_PASSWORD }}
      - name: "Package Playback"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          mkdir artifact
          cd  ./build/Binaries
          FILE_NAME=${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-macOS-playback.zip
          zip -r "${FILE_NAME}" Slippi\ Dolphin.app
          mv "${FILE_NAME}" ../../artifact/
      - name: "Publish"
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: "macOS-playback"
          path: "./artifact/"
