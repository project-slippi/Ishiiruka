name: Slippi Dolphin CI Builds

on:
  release:
    types: 
      - published
  push:
    branches:
      - slippi
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"
    branches:
      - "**"

jobs:
  ubuntu64:
    name: "Ubuntu/Bionic"
    runs-on: ubuntu-18.04
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Fetch Git Tags'
        if: success()
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)
          echo ::set-env name=GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=GIT_TAG::$(git describe --tags --abbrev=0)
          echo ::set-env name=CURR_DATE::$(date +%Y-%m-%d)
      - name: "Install prerequisites"
        if: success()
        shell: bash
        run: |
          sudo dpkg --add-architecture amd64
          sudo apt update
          sudo apt install \
          cmake \
          pkg-config \
          git \
          libao-dev \
          libasound2-dev \
          libavcodec-dev \
          libavformat-dev \
          libbluetooth-dev \
          libenet-dev \
          libgtk2.0-dev \
          liblzo2-dev \
          libminiupnpc-dev \
          libopenal-dev \
          libpulse-dev \
          libreadline-dev \
          libsfml-dev \
          libsoil-dev \
          libsoundtouch-dev \
          libswscale-dev \
          libusb-1.0-0-dev \
          libwxbase3.0-dev \
          libwxgtk3.0-dev \
          libxext-dev \
          libxrandr-dev \
          portaudio19-dev \
          zlib1g-dev \
          libudev-dev \
          libevdev-dev \
          libmbedtls-dev \
          libcurl4-openssl-dev \
          libegl1-mesa-dev \
          libpng-dev \
          qtbase5-private-dev \
          libxxf86vm-dev \
          x11proto-xinerama-dev
      - name: "Build"
        if: success()
        working-directory: ${{ github.workspace }}
        run: |
          ./build-linux.sh
      - name: "Package Netplay"
        if: success()
        working-directory: ${{ github.workspace }}
        run: |
          FILE_NAME=${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-ubuntu64-netplay.tar.gz
          echo "::set-env name=FILE_NAME::${FILE_NAME}"
          mkdir artifact
          cd ./build/Binaries/
          zip -r "${FILE_NAME}" .
          mv "${FILE_NAME}" ../../artifact/
      - name: "Package Playback"
        if: success()
        working-directory: ${{ github.workspace }}
        run: |
          git clone https://github.com/project-slippi/slippi-desktop-app
          cd ./build/Binaries/
          cp -Rf ../../slippi-desktop-app/app/dolphin-dev/overwrite/Sys .
          cp -Rf ../../slippi-desktop-app/app/dolphin-dev/overwrite/User .
          FILE_NAME=${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-ubuntu64-playback.zip
          zip -r "${FILE_NAME}" .
          mv "${FILE_NAME}" ../../artifact/
      - name: "Publish"
        if: github.event_name != 'pull_request' || contains( github.event.pull_request.labels.*.name, 'seeking testers') && success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: "ubuntu18.04-builds"
          path: "./artifact/"
  macOS64:
    name: "macOS Catalina"
    runs-on: macos-10.15
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Fetch Git Tags'
        if: success()
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)
          echo ::set-env name=GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=GIT_TAG::$(git describe --tags --abbrev=0)
          echo ::set-env name=CURR_DATE::$(date +%Y-%m-%d)
      - name: "Install 10.14 SDK"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz
          tar -xf MacOSX10.14.sdk.tar.xz
          rm MacOSX10.14.sdk.tar.xz
          sudo mv MacOSX10.14.sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/
      - name: "Download and Install prerequisites"
        if: success()
        shell: bash
        run: |
          wget https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxWidgets-3.1.3.tar.bz2
          tar -xf wxWidgets-3.1.3.tar.bz2
          rm wxWidgets-3.1.3.tar.bz2
          brew update
          brew upgrade cmake
          brew install \
          ffmpeg \
          libpng \
          libav \
          pkgconfig \
          libao \
          sound-touch \
          hidapi
      - name: "Cache wxWidgets 3.1.3"
        uses: actions/cache@v1
        env:
          cache-name: "wxWidgets-3.1.3-macOS"
        with:
          path: ./wxWidgets-3.1.3/build
          key: "wxWidgets-3.1.3-macOS"
      - name: "Install wxWidgets 3.1.3"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          cd wxWidgets-3.1.3
          cd build
          ../configure
          make -j7
          sudo make install
      - name: "Build"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          mkdir build
          cd build
          cmake ..
          make -j7
      - name: "Package Netplay"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          FILE_NAME=${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-macOS-netplay.tar.gz
          echo "::set-env name=FILE_NAME::${FILE_NAME}"
          cp -R Overwrite/* build/Binaries/Dolphin.app/Contents/Resources
          mkdir artifact
          cd ./build/Binaries/
          zip -r "${FILE_NAME}" .
          mv "${FILE_NAME}" ../../artifact/
      - name: "Package Playback"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          git clone https://github.com/project-slippi/slippi-desktop-app
          cd ./build/Binaries/
          cp -Rf ../../slippi-desktop-app/app/dolphin-dev/overwrite/Sys ./Dolphin.app/Contents/Resources
          cp -Rf ../../slippi-desktop-app/app/dolphin-dev/overwrite/User ./Dolphin.app/Contents/Resources
          FILE_NAME=${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-macOS-playback.zip
          zip -r "${FILE_NAME}" .
          mv "${FILE_NAME}" ../../artifact/
      - name: "Publish"
        if: github.event_name != 'pull_request' || contains( github.event.pull_request.labels.*.name, 'seeking testers') && success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: "macOS-builds"
          path: "./artifact"
